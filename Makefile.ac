
#
#  ScorePress - Music Engraving Software  (scorepress-gtk)
#  Copyright (C) 2014 Dominik Lehmann
#  
#  Licensed under the EUPL, Version 1.1 or - as soon they
#  will be approved by the European Commission - subsequent
#  versions of the EUPL (the "Licence");
#  You may not use this work except in compliance with the
#  Licence.
#  
#  Unless required by applicable law or agreed to in
#  writing, software distributed under the Licence is
#  distributed on an "AS IS" basis, WITHOUT WARRANTIES OR
#  CONDITIONS OF ANY KIND, either expressed or implied.
#  See the Licence for the specific language governing
#  permissions and limitations under the Licence.
#

#
# MAKEFILE
#

# programs
SH        := @SH@
CXX       := @CXX@
INSTALL   := @INSTALL@
INSTALLU  := @INSTALL_DATA@
SED       := @SED@
PKGCONFIG := @PKGCONFIG@

# target filenames
PACKAGE_TARNAME := @PACKAGE_TARNAME@
binfile         := scorepress

# directories
prefix      := @prefix@
exec_prefix := @exec_prefix@
datarootdir := @datarootdir@
datadir     := @datadir@/${PACKAGE_TARNAME}
distdir     := @PACKAGE_NAME@-@PACKAGE_VERSION@

srcdir      := @srcdir@/src
datasrc     := @srcdir@/data
iconsrc     := ${datasrc}/icons
appiconsrc  := ${datasrc}/icons
builddir    := @builddir@/build

bindir   := @bindir@
mandir   := @mandir@/man3
docdir   := @docdir@
htmldir  := @htmldir@/html
dvidir   := @dvidir@
pdfdir   := @pdfdir@
psdir    := @psdir@

# icons
icontheme    := hicolor
iconctx      := apps
icondir      := @datadir@/icons/${icontheme}
iconfiles    := scorepress.png scorepress-sm.png
iconsizes    := 16 24 32 48 64 128
appicondir   := ${datadir}/icons/${icontheme}
appiconfiles := 
appiconsizes := 

# desktop file
desktopfile     := ${PACKAGE_TARNAME}.desktop
desktopac       := ${datasrc}/scorepress.desktop.ac
desktopdir      := @datadir@/applications
desktopiconsize := 128
desktopiconfile := scorepress.png

# compiler flags
SCOREPRESSFLAGS := @LIBSCOREPRESS_CFLAGS@ -DSCOREPRESS_SO
SCOREPRESSLIBS  := @LIBSCOREPRESS_LIBS@
GTKFLAGS        := @LIBGTKMM_CFLAGS@
GTKLIBS         := @LIBGTKMM_LIBS@
CAIROFLAGS      := @LIBCAIROMM_CFLAGS@
CAIROLIBS       := @LIBCAIROMM_LIBS@
PANGOFLAGS      := @LIBPANGO_CFLAGS@
PANGOLIBS       := @LIBPANGO_LIBS@
RSVGFLAGS       := @LIBRSVG_CFLAGS@
RSVGLIBS        := @LIBRSVG_LIBS@
XMLFLAGS        := @LIBXML_CFLAGS@
XMLLIBS         := @LIBXML_LIBS@

WARNINGS :=  @WARNINGS@

CTRLFLAGS := @CTRLFLAGS@

MODE    := @MODE@
DEBUG   := @DEBUG@
PROFILE := @PROFILE@
RELEASE := @RELEASE@

CONFIGFLAGS := -DDATADIR="\"${datadir}\"" -DICONDIR="\"@datadir@/icons\"" -DAPPICONDIR="\"${datadir}/icons\""
USERFLAGS   := @CFLAGS@
USERLIBS    := @LDFLAGS@ @LIBS@

FLAGS := ${WARNINGS} ${CTRLFLAGS} ${${MODE}} -I${srcdir} ${SCOREPRESSFLAGS} ${USERFLAGS}
LIBS  := ${SCOREPRESSLIBS} ${GTKLIBS} ${CAIROLIBS} ${PANGOLIBS} ${RSVGLIBS} ${XMLLIBS} ${USERLIBS}

# file lists
cfiles := ${srcdir}/main.cpp            \
          ${srcdir}/application.cpp     \
          ${srcdir}/controller.cpp      \
          ${srcdir}/cmdline_options.cpp \
          ${srcdir}/config.cpp          \
          ${srcdir}/rsvg_renderer.cpp   \
          ${srcdir}/key_map.cpp         \
          ${srcdir}/key_listener.cpp    \
          ${srcdir}/mainwnd.cpp         \
          ${srcdir}/score_widget.cpp    \
          ${srcdir}/icon_manager.cpp

hfiles := ${srcdir}/application.hh      \
          ${srcdir}/controller.hh       \
          ${srcdir}/cmdline_options.hh  \
          ${srcdir}/config.hh           \
          ${srcdir}/rsvg_renderer.hh    \
          ${srcdir}/key_map.hh          \
          ${srcdir}/key_listener.hh     \
          ${srcdir}/mainwnd.hh          \
          ${srcdir}/score_widget.hh     \
          ${srcdir}/icon_manager.hh     \
          ${srcdir}/i18n.hh

srcfiles := ${cfiles} ${hfiles}

ofiles := ${builddir}/main.o            \
          ${builddir}/application.o     \
          ${builddir}/controller.o      \
          ${builddir}/cmdline_options.o \
          ${builddir}/config.o          \
          ${builddir}/rsvg_renderer.o   \
          ${builddir}/key_map.o         \
          ${builddir}/key_listener.o    \
          ${builddir}/mainwnd.o         \
          ${builddir}/score_widget.o    \
          ${builddir}/icon_manager.o

distfiles := @srcdir@/AUTHORS     \
             @srcdir@/configure   \
             @srcdir@/install-sh  \
             @srcdir@/LICENCE.pdf \
             @srcdir@/Makefile.ac \
             @srcdir@/README      \
             @srcdir@/data        \
             @srcdir@/src

# header dependency list
deps_icon_manager_hh     := ${srcdir}/icon_manager.hh
deps_rsvg_renderer_hh    := ${srcdir}/rsvg_renderer.hh
deps_cmdline_options_hh  := ${srcdir}/cmdline_options.hh
deps_config_hh           := ${srcdir}/config.hh
deps_i18n_hh             := ${srcdir}/i18n.hh
deps_key_map_hh          := ${srcdir}/key_map.hh
deps_key_listener_hh     := ${srcdir}/key_listener.hh ${deps_key_map_hh}
deps_controller_hh       := ${srcdir}/controller.hh ${deps_rsvg_renderer_hh} ${deps_key_listener_hh}
deps_score_widget_hh     := ${srcdir}/score_widget.hh ${deps_controller_hh}
deps_mainwnd_hh          := ${srcdir}/mainwnd.hh ${deps_score_widget_hh} ${deps_icon_manager_hh} ${deps_rsvg_renderer_hh}
deps_application_hh      := ${srcdir}/application.hh ${deps_icon_manager_hh} ${deps_key_listener_hh} ${deps_mainwnd_hh}

deps_main_cpp            := ${srcdir}/main.cpp ${application_hh}
deps_application_cpp     := ${srcdir}/application.cpp ${deps_application_hh} ${deps_cmdline_options_hh} ${deps_controller_hh} ${deps_config_hh} ${deps_i18n_hh}
deps_controller_cpp      := ${srcdir}/controller.cpp ${deps_controller_hh} ${deps_mainwnd_hh} ${deps_config_hh}
deps_cmdline_options_cpp := ${srcdir}/cmdline_options.cpp ${deps_cmdline_options_hh} ${deps_i18n_hh} ${deps_config_hh}
deps_config_cpp          := ${srcdir}/config.cpp ${deps_config_hh} ${deps_config_hh} @srcdir@/Makefile
deps_rsvg_renderer_cpp   := ${srcdir}/rsvg_renderer.cpp ${deps_rsvg_renderer_hh} ${deps_i18n_hh}
deps_key_map_cpp         := ${srcdir}/key_map.cpp ${deps_key_map_hh}
deps_key_listener_cpp    := ${srcdir}/key_listener.cpp ${deps_key_listener_hh}
deps_mainwnd_cpp         := ${srcdir}/mainwnd.cpp ${deps_mainwnd_hh} ${deps_config_hh} ${deps_i18n_hh}
deps_score_widget_cpp    := ${srcdir}/score_widget.cpp ${deps_score_widget_hh}
deps_icon_manager_cpp    := ${srcdir}/icon_manager.cpp ${deps_icon_manager_hh} ${deps_i18n_hh} ${deps_config_hh}


#
# MAIN TARGETS
#

.PHONY: all                                                              \
        install install-bin install-data install-basedata                \
        install-icons install-appicons update-icon-cache install-desktop \
        uninstall uninstall-bin uninstall-data                           \
        clean distclean help                                             \
        dist dist-gzip dist-bzip2 dist-zip deb

# compile
all: ${srcfiles} ${builddir} ${builddir}/${binfile}

# install
install: install-bin install-data

install-bin: ${builddir} ${builddir}/${binfile} ${bindir}
	@echo "Installing:     ${binfile}"
	@${INSTALL} ${builddir}/${binfile} ${bindir}

install-data: install-basedata install-icons install-appicons install-desktop

install-basedata: ${datadir}
	@echo "Installing Data..."
	@echo "  Installing:   logo.png"
	@${INSTALLU} -t ${datadir} ${datasrc}/logo.png
	@echo "  Installing:   EUPL.txt"
	@${INSTALLU} -t ${datadir} ${datasrc}/EUPL.txt
	@echo "  Installing:   CC-BY-SA.pdf"
	@${INSTALLU} -t ${datadir} ${datasrc}/CC-BY-SA.pdf

install-icons: ${icondir}
	@echo "  Installing:   Icons (systemwide)"
	@for size in ${iconsizes}; do                                       \
	    if test ! -e ${icondir}/$${size}x$${size}; then                 \
	        mkdir ${icondir}/$${size}x$${size};                         \
	        mkdir ${icondir}/$${size}x$${size}/${iconctx};              \
	    elif test ! -e ${icondir}/$${size}x$${size}/${iconctx}; then    \
	        mkdir ${icondir}/$${size}x$${size}/${iconctx};              \
	    fi;                                                             \
	    for file in ${iconfiles}; do                                    \
	        ${INSTALLU} -t ${icondir}/$${size}x$${size}/${iconctx} ${iconsrc}/$${size}x$${size}/$${file}; \
	    done;                                                           \
	 done

install-appicons: ${appicondir}
	@echo "  Installing:   Icons (application specific)"
	@for size in ${appiconsizes}; do                                    \
	    if test ! -e ${appicondir}/$${size}x$${size}; then              \
	        mkdir ${appicondir}/$${size}x$${size};                      \
	        mkdir ${appicondir}/$${size}x$${size}/${iconctx};           \
	    elif test ! -e ${appicondir}/$${size}x$${size}/${iconctx}; then \
	        mkdir ${appicondir}/$${size}x$${size}/${iconctx};           \
	    fi;                                                             \
	    for file in ${appiconfiles}; do                                 \
	        ${INSTALLU} -t ${appicondir}/$${size}x$${size}/${iconctx} ${iconsrc}/$${size}x$${size}/$${file}; \
	    done;                                                           \
	 done

update-icon-cache:
	gtk-update-icon-cache -f -t ${icondir}

# desktop integration
${datasrc}/${desktopfile}: ${desktopac}
	@echo "  Generating:   ${PACKAGE_TARNAME}.desktop"; \
	_desktop_icon=${icondir}/${desktopiconsize}x${desktopiconsize}/${iconctx}/scorepress.png; \
	_desktop_exec=${bindir}/${binfile};                 \
	IFS_ORI=$$IFS;                                      \
	IFS=:;                                              \
	for path in $$XDG_DATA_DIRS; do                     \
	    if test "$(echo $$path | sed --posix 's|\/*$||g')" = "${datarootdir}"; then \
	        _desktop_icon=scorepress;                   \
	    fi;                                             \
	done;                                               \
	for path in $$PATH; do                              \
	    if test "$(echo $$path | sed --posix 's|\/*$||g')" = "${bindir}"; then \
	        _desktop_exec=${binfile};                   \
	    fi;                                             \
	done;                                               \
	IFS=$$_IFS;                                         \
	${SED} -e "s|@DESKTOP_ICON[@]|$$_desktop_icon|g"    \
	       -e "s|@DESKTOP_EXEC[@]|$$_desktop_exec|g"    \
	       < ${desktopac} > ${datasrc}/${desktopfile}

install-desktop: ${desktopdir} ${datasrc}/${desktopfile}
	@echo "  Installing:   Desktop Entry"
	@${INSTALL} -t ${desktopdir} ${datasrc}/${desktopfile}

# uninstall
uninstall: uninstall-bin uninstall-data

uninstall-bin:
	@test -f ${bindir}/${binfile} && echo "Removing:    ${binfile}" || :
	@-rm -f ${bindir}/${binfile}

uninstall-data:
	@echo "Removing Data..."
	@echo "  Removing:  Icons"
	@for size in ${iconsizes}; do                                   \
	    for file in ${iconfiles}; do                                \
	        rm -f ${icondir}/$${size}x$${size}/${iconctx}/$${file}; \
	    done;                                                       \
	 done
	@-rm -rf ${datadir}/icons
	@test -f ${datadir}/logo.png && echo "  Removing:  logo.png" || :
	@-rm -f ${datadir}/logo.png
	@test -f ${desktopdir}/${desktopfile} && echo "  Removing:  Desktop Entry" || :
	@-rm -f ${desktopdir}/${desktopfile}
	@test -f ${datadir}/EUPL.txt && echo "  Removing:  EUPL.txt" || :
	@-rm -f ${datadir}/EUPL.txt
	@test -f ${datadir}/CC-BY-SA.pdf && echo "  Removing:  CC-BY-SA.pdf" || :
	@-rm -f ${datadir}/CC-BY-SA.pdf
	@test -d ${datadir} && (rmdir ${datadir} 2> /dev/null || echo "  WARNING: \"${datadir}\" is not empty") || :

# clean
clean:
	@echo "Cleaning \"${PACKAGE_TARNAME}\""
	@echo "  Deleting:     object-files..."
	@-rm -f  ${ofiles}
	@-rm -f  ${builddir}/${binfile}
	@echo "  Deleting:     build directory..."
	@test -d ${builddir} && (rmdir ${builddir} 2> /dev/null || echo "  WARNING: \"${builddir}\" is not empty") || :

distclean: clean
	@echo "  Deleting:     configuration..."
	@-rm -f ${srcdir}/config.hh
	@-rm -f ${datasrc}/${desktopfile}
	@-rm -f @srcdir@/config.log
	@-rm -f @srcdir@/config.status
	@-rm -f @srcdir@/Makefile

help:
	@echo "No Help Available"

# distributions
dist: ${srcfiles} ${distdir}
	cp -RP --preserve=timestamps,links ${distfiles} ${distdir}
	if test -f ${distdir}/src/config.hh; then rm -f ${distdir}/src/config.hh; fi

dist-gzip: ${srcfiles} dist
	tar -cf - ${distdir} | gzip -c > ${distdir}.tar.gz

dist-bzip2: ${srcfiles} dist
	tar -cf - ${distdir} | bzip2 -c > ${distdir}.tar.bz2

dist-zip: ${srcfiles} dist
	zip -qr ${distdir}.zip ${distdir}

deb: ${srcfiles}
	@echo "Debian Packaging not implemented yet."

# directories
${builddir} ${bindir} ${datadir} ${distdir} ${icondir} ${appicondir} ${desktopdir}:
#@echo "[[Creating directory:  $@]]"
	@-mkdir -p $@ 2> /dev/null || echo "  ERROR: cannot create directory \"$@\""


#
# TARGET FILES
#

${builddir}/${binfile}: ${srcfiles}
						@echo "Making:         ${binfile}"
						@${MAKE} -s ${ofiles}
						@echo "  Linking:      ${binfile}..."
						@${CXX} ${ofiles} -o ${builddir}/${binfile} ${LIBS} ${FLAGS}

#
# MAIN PROGRAM
#

${builddir}/main.o:				${deps_main_cpp}
								echo "  Compiling:    main.cpp..."
								${CXX} -c ${srcdir}/main.cpp -o ${builddir}/main.o ${GTKFLAGS} ${RSVGFLAGS} ${FLAGS}

${builddir}/application.o:		${deps_application_cpp}
								echo "  Compiling:    application.cpp..."
								${CXX} -c ${srcdir}/application.cpp -o ${builddir}/application.o ${GTKFLAGS} ${RSVGFLAGS} ${FLAGS}

${builddir}/config.o:			${deps_config_cpp}
								echo "  Compiling:    config.cpp..."
								${CXX} -c ${srcdir}/config.cpp -o ${builddir}/config.o ${GTKFLAGS} ${PANGOFLAGS} ${RSVGFLAGS} ${XMLFLAGS} ${FLAGS} ${CONFIGFLAGS}

${builddir}/controller.o:		${deps_controller_cpp}
								echo "  Compiling:    controller.cpp..."
								${CXX} -c ${srcdir}/controller.cpp -o ${builddir}/controller.o ${GTKFLAGS} ${RSVGFLAGS} ${FLAGS}

${builddir}/cmdline_options.o:	${deps_cmdline_options_cpp}
								echo "  Compiling:    cmdline_options.cpp..."
								${CXX} -c ${srcdir}/cmdline_options.cpp -o ${builddir}/cmdline_options.o ${FLAGS}

#
# GRAPHICAL USER INTERFACE
#

${builddir}/rsvg_renderer.o:	${deps_rsvg_renderer_cpp}
								echo "  Compiling:    rsvg_renderer.cpp..."
								${CXX} -c ${srcdir}/rsvg_renderer.cpp -o ${builddir}/rsvg_renderer.o ${PANGOFLAGS} ${RSVGFLAGS} ${XMLFLAGS} ${FLAGS}

${builddir}/key_map.o:			${deps_key_map_cpp}
								echo "  Compiling:    key_map.cpp..."
								${CXX} -c ${srcdir}/key_map.cpp -o ${builddir}/key_map.o ${FLAGS}

${builddir}/key_listener.o:		${deps_key_listener_cpp}
								echo "  Compiling:    key_listener.cpp..."
								${CXX} -c ${srcdir}/key_listener.cpp -o ${builddir}/key_listener.o ${FLAGS}

${builddir}/mainwnd.o:			${deps_mainwnd_cpp}
								echo "  Compiling:    mainwnd.cpp..."
								${CXX} -c ${srcdir}/mainwnd.cpp -o ${builddir}/mainwnd.o ${GTKFLAGS} ${RSVGFLAGS} ${FLAGS}

${builddir}/score_widget.o:		${deps_score_widget_cpp}
								echo "  Compiling:    score_widget.cpp..."
								${CXX} -c ${srcdir}/score_widget.cpp -o ${builddir}/score_widget.o ${GTKFLAGS} ${RSVGFLAGS} ${FLAGS}

${builddir}/icon_manager.o:		${deps_icon_manager_cpp}
								echo "  Compiling:    icon_manager.cpp..."
								${CXX} -c ${srcdir}/icon_manager.cpp -o ${builddir}/icon_manager.o ${GTKFLAGS} ${FLAGS}

