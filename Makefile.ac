
#
#  ScorePress - Music Engraving Software  (scorepress-gtk)
#  Copyright (C) 2014 Dominik Lehmann
#  
#  Licensed under the EUPL, Version 1.1 or - as soon they
#  will be approved by the European Commission - subsequent
#  versions of the EUPL (the "Licence");
#  You may not use this work except in compliance with the
#  Licence.
#  
#  Unless required by applicable law or agreed to in
#  writing, software distributed under the Licence is
#  distributed on an "AS IS" basis, WITHOUT WARRANTIES OR
#  CONDITIONS OF ANY KIND, either expressed or implied.
#  See the Licence for the specific language governing
#  permissions and limitations under the Licence.
#

#
# MAKEFILE
#

# programs
SHELL           := @SHELL@
SH              := @SH@
CXX             := @CXX@
INSTALL         := @INSTALL@
INSTALL_DATA    := @INSTALL_DATA@
INSTALL_PROGRAM := @INSTALL_PROGRAM@
PKGCONFIG       := @PKGCONFIG@

# target filenames
PACKAGE_TARNAME := @PACKAGE_TARNAME@
binfile         := scorepress

# directories
prefix      := @prefix@
exec_prefix := @exec_prefix@
datarootdir := @datarootdir@
datadir     := @datadir@
datadir_pkg := ${datadir}/${PACKAGE_TARNAME}
distdir     := @PACKAGE_NAME@-@PACKAGE_VERSION@

srcdir      := @srcdir@
cppsrc      := ${srcdir}/src
datasrc     := ${srcdir}/data
iconsrc     := ${datasrc}/icons
appiconsrc  := ${datasrc}/icons
builddir    := @builddir@/build

bindir   := @bindir@
mandir   := @mandir@
man1dir  := ${mandir}/man1
manext   := .1
docdir   := @docdir@
htmldir  := @htmldir@
dvidir   := @dvidir@
pdfdir   := @pdfdir@
psdir    := @psdir@

# icons
icontheme    := hicolor
iconctx      := apps
icondir      := ${datadir}/icons/${icontheme}
iconfiles    := scorepress.png scorepress-sm.png
iconsizes    := 16 24 32 48 64 128
appicondir   := ${datadir_pkg}/icons
appiconfiles := note-1.svg note0.svg note1.svg note2.svg note4.svg note8.svg note16.svg note32.svg note64.svg note128.svg note256.svg

# desktop file
desktopfile     := ${PACKAGE_TARNAME}.desktop
desktopac       := ${datasrc}/scorepress.desktop.ac
desktopdir      := ${datadir}/applications
desktopiconsize := 128
desktopiconfile := scorepress.png

# compiler flags
SCOREPRESSFLAGS := @LIBSCOREPRESS_CFLAGS@ -DSCOREPRESS_SO
SCOREPRESSLIBS  := @LIBSCOREPRESS_LIBS@
GTKFLAGS        := @LIBGTKMM_CFLAGS@
GTKLIBS         := @LIBGTKMM_LIBS@
CAIROFLAGS      := @LIBCAIROMM_CFLAGS@
CAIROLIBS       := @LIBCAIROMM_LIBS@
PANGOFLAGS      := @LIBPANGO_CFLAGS@
PANGOLIBS       := @LIBPANGO_LIBS@
RSVGFLAGS       := @LIBRSVG_CFLAGS@
RSVGLIBS        := @LIBRSVG_LIBS@
XMLFLAGS        := @LIBXML_CFLAGS@
XMLLIBS         := @LIBXML_LIBS@

WARNINGS :=  @WARNINGS@

CTRLFLAGS := @CTRLFLAGS@

MODE    := @MODE@
DEBUG   := @DEBUG@
PROFILE := @PROFILE@
RELEASE := @RELEASE@

RPATHFLAG    := @RPATHFLAG@
RPATH        := @RPATH@

CONFIGFLAGS  := -DPREFIX="\"${PREFIX}\""                \
                -DDATADIR="\"${datadir_pkg}\""          \
                -DDESTDIR="\"${DESTDIR}\""              \
                -DICONDIR="\"${datadir}/icons\""        \
                -DAPPICONDIR="\"${datadir_pkg}/icons\""

USER_CFLAGS  := @CFLAGS@
USER_FLAGS   := ${USER_CFLAGS} ${CFLAGS}
USER_LIBS    := @LIBS@
USER_LDFLAGS := @LDFLAGS@
USER_RPATH   := @USER_RPATH@

USER_LIBSCOREPRESS := @LIBSCOREPRESS@
USER_LIBXML        := @LIBXML@

FLAGS := ${WARNINGS} ${CTRLFLAGS} ${${MODE}} -I${cppsrc} -I${srcdir} ${SCOREPRESSFLAGS} ${USER_CFLAGS}
LIBS  := ${SCOREPRESSLIBS} ${GTKLIBS} ${CAIROLIBS} ${PANGOLIBS} ${RSVGLIBS} ${XMLLIBS} \
         ${USER_LIBS} ${USER_LDFLAGS} ${RPATH} ${RPATHFLAG}${USER_RPATH}

# file lists
cfiles := ${cppsrc}/main.cpp            \
          ${cppsrc}/application.cpp     \
          ${cppsrc}/controller.cpp      \
          ${cppsrc}/config.cpp          \
          ${cppsrc}/rsvg_renderer.cpp   \
          ${cppsrc}/key_map.cpp         \
          ${cppsrc}/key_listener.cpp    \
          ${cppsrc}/mainwnd.cpp         \
          ${cppsrc}/about_dialog.cpp    \
          ${cppsrc}/view.cpp            \
          ${cppsrc}/score_widget.cpp    \
          ${cppsrc}/icon_manager.cpp

hfiles := ${cppsrc}/application.hh      \
          ${cppsrc}/controller.hh       \
          ${srcdir}/config.hh           \
          ${cppsrc}/rsvg_renderer.hh    \
          ${cppsrc}/key_map.hh          \
          ${cppsrc}/key_listener.hh     \
          ${cppsrc}/mainwnd.hh          \
          ${srcdir}/mainwnd-ui.xml.hh   \
          ${cppsrc}/about_dialog.hh     \
          ${cppsrc}/view.hh             \
          ${cppsrc}/score_widget.hh     \
          ${cppsrc}/icon_manager.hh     \
          ${cppsrc}/i18n.hh

srcfiles := ${cfiles} ${hfiles}

ofiles := ${builddir}/main.o            \
          ${builddir}/application.o     \
          ${builddir}/controller.o      \
          ${builddir}/config.o          \
          ${builddir}/rsvg_renderer.o   \
          ${builddir}/key_map.o         \
          ${builddir}/key_listener.o    \
          ${builddir}/mainwnd.o         \
          ${builddir}/about_dialog.o    \
          ${builddir}/view.o            \
          ${builddir}/score_widget.o    \
          ${builddir}/icon_manager.o

distfiles := ${srcdir}/AUTHORS     \
             ${srcdir}/configure   \
             ${srcdir}/install-sh  \
             ${srcdir}/LICENCE.pdf \
             ${srcdir}/Makefile.ac \
             ${srcdir}/README      \
             ${srcdir}/data        \
             ${srcdir}/src

# header dependency list
deps_config_hh            := ${srcdir}/config.hh
deps_mainwnd_ui_xml_hh    := ${srcdir}/mainwnd-ui.xml.hh
deps_about_dialog_hh      := ${cppsrc}/about_dialog.hh
deps_i18n_hh              := ${cppsrc}/i18n.hh
deps_score_widget_hh      := ${cppsrc}/score_widget.hh
deps_icon_manager_hh      := ${cppsrc}/icon_manager.hh
deps_mainwnd_hh           := ${cppsrc}/mainwnd.hh ${deps_icon_manager_hh} ${deps_about_dialog_hh}
deps_view_hh              := ${cppsrc}/view.hh ${deps_score_widget_hh} ${deps_mainwnd_hh}
deps_rsvg_renderer_hh     := ${cppsrc}/rsvg_renderer.hh
deps_key_map_hh           := ${cppsrc}/key_map.hh
deps_key_listener_hh      := ${cppsrc}/key_listener.hh ${deps_key_map_hh}
deps_controller_hh        := ${cppsrc}/controller.hh ${deps_view_hh} ${deps_rsvg_renderer_hh} ${deps_key_listener_hh}
deps_application_hh       := ${cppsrc}/application.hh ${deps_controller_hh}

deps_about_dialog_cpp     := ${cppsrc}/about_dialog.cpp ${deps_about_dialog_hh} ${deps_config_hh} ${deps_i18n_hh}
deps_application_cpp      := ${cppsrc}/application.cpp ${deps_application_hh} ${deps_config_hh} ${deps_i18n_hh}
deps_config_cpp           := ${cppsrc}/config.cpp ${deps_config_hh}
deps_controller_cpp       := ${cppsrc}/controller.cpp ${deps_controller_hh}
deps_icon_manager_cpp     := ${cppsrc}/icon_manager.cpp ${deps_icon_manager_hh} ${deps_i18n_hh} ${deps_config_hh}
deps_key_listener_cpp     := ${cppsrc}/key_listener.cpp ${deps_controller_hh}
deps_key_map_cpp          := ${cppsrc}/key_map.cpp ${deps_key_map_hh}
deps_main_cpp             := ${cppsrc}/main.cpp ${deps_application_hh}
deps_mainwnd_cpp          := ${cppsrc}/mainwnd.cpp ${deps_mainwnd_ui_xml_hh} ${deps_controller_hh} ${deps_config_hh} ${deps_i18n_hh}
deps_rsvg_renderer_cpp    := ${cppsrc}/rsvg_renderer.cpp ${deps_rsvg_renderer_hh} ${deps_i18n_hh}
deps_score_widget_cpp     := ${cppsrc}/score_widget.cpp ${deps_controller_hh}
deps_view_cpp             := ${cppsrc}/view.cpp ${deps_controller_hh}

#
# MAIN TARGETS
#

.PHONY: all                                                              \
        install install-bin install-data install-basedata                \
        install-icons install-appicons update-icon-cache install-desktop \
        uninstall uninstall-bin uninstall-data                           \
        clean distclean help configinfo                                  \
        dist dist-gzip dist-bzip2 dist-zip deb

# compile
all: ${srcfiles} ${builddir} ${builddir}/${binfile}

# install
install: install-bin install-data

install-bin: ${builddir} ${builddir}/${binfile} ${DESTDIR}${bindir}
	$(NORMAL_INSTALL)
	@echo "Installing:     ${binfile}"
	@${INSTALL_PROGRAM} ${builddir}/${binfile} ${DESTDIR}${bindir}

install-data: install-basedata install-icons install-appicons install-desktop

install-basedata: ${DESTDIR}${datadir_pkg}
	$(NORMAL_INSTALL)
	@echo "Installing Data..."
	@echo "  Installing:   logo.png"
	@${INSTALL_DATA} -t ${DESTDIR}${datadir_pkg} ${datasrc}/logo.png
	@echo "  Installing:   EUPL.txt"
	@${INSTALL_DATA} -t ${DESTDIR}${datadir_pkg} ${datasrc}/EUPL.txt
	@echo "  Installing:   CC-BY-SA.pdf"
	@${INSTALL_DATA} -t ${DESTDIR}${datadir_pkg} ${datasrc}/CC-BY-SA.pdf

install-icons: ${DESTDIR}${icondir}
	$(NORMAL_INSTALL)
	@echo "  Installing:   Icons (systemwide)"
	@for size in ${iconsizes}; do                                       \
	    if test "$${size}" != "scalable"; then                          \
	        size=$${size}x$${size};                                     \
	    fi;                                                             \
	    if test ! -e ${DESTDIR}${icondir}/$${size}; then                \
	        mkdir ${DESTDIR}${icondir}/$${size};                        \
	        mkdir ${DESTDIR}${icondir}/$${size}/${iconctx};             \
	    elif test ! -e ${DESTDIR}${icondir}/$${size}/${iconctx}; then   \
	        mkdir ${DESTDIR}${icondir}/$${size}/${iconctx};             \
	    fi;                                                             \
	    for file in ${iconfiles}; do                                    \
	        ${INSTALL_DATA} -t ${DESTDIR}${icondir}/$${size}/${iconctx} \
	                           ${iconsrc}/$${size}/$${file};            \
	    done;                                                           \
	 done

install-appicons: ${DESTDIR}${appicondir}
	$(NORMAL_INSTALL)
	@echo "  Installing:   Icons (application specific)"
	@for file in ${appiconfiles}; do                 \
	    ${INSTALL_DATA} -t ${DESTDIR}${appicondir}   \
	                       ${appiconsrc}/$${file};   \
	 done

update-icon-cache:
	$(POST_INSTALL)
	gtk-update-icon-cache -f -t ${DESTDIR}${icondir}
	gtk-update-icon-cache -f -t ${DESTDIR}${appicondir}

# desktop integration
${builddir}/${desktopfile}: ${desktopac}
	$(PRE_INSTALL)
	@echo "  Generating:   ${PACKAGE_TARNAME}.desktop"; \
	_desktop_icon=${icondir}/${desktopiconsize}x${desktopiconsize}/${iconctx}/scorepress.png; \
	_desktop_exec=${bindir}/${binfile};       \
	IFS_ORI=$$IFS;                                      \
	IFS=:;                                              \
	for path in $$XDG_DATA_DIRS; do                     \
	    if test "$(echo $$path | sed 's|\/*$||g')" = "${datarootdir}"; then \
	        _desktop_icon=scorepress;                   \
	    fi;                                             \
	done;                                               \
	for path in $$PATH; do                              \
	    if test "$(echo $$path | sed 's|\/*$||g')" = "${bindir}"; then \
	        _desktop_exec=${binfile};                   \
	    fi;                                             \
	done;                                               \
	IFS=$$_IFS;                                         \
	sed "s|@DESKTOP_ICON[@]|$$_desktop_icon|g;s|@DESKTOP_EXEC[@]|$$_desktop_exec|g" \
	    < ${desktopac} > ${builddir}/${desktopfile}

install-desktop: ${DESTDIR}${desktopdir} ${builddir}/${desktopfile}
	$(NORMAL_INSTALL)
	@echo "  Installing:   Desktop Entry"
	@${INSTALL} -t ${DESTDIR}${desktopdir} ${builddir}/${desktopfile}

# uninstall
uninstall: uninstall-bin uninstall-data

uninstall-bin:
	@test -f ${DESTDIR}${bindir}/${binfile} && echo "Removing:    ${binfile}" || :
	@-rm -f ${DESTDIR}${bindir}/${binfile}

uninstall-data:
	@echo "Removing Data..."
	@echo "  Removing:  Icons"
	@for size in ${iconsizes}; do                                   \
	    for file in ${iconfiles}; do                                \
	        rm -f ${DESTDIR}${icondir}/$${size}x$${size}/${iconctx}/$${file}; \
	    done;                                                       \
	 done
	@-rm -rf ${DESTDIR}${datadir_pkg}/icons
	@test -f ${DESTDIR}${datadir_pkg}/logo.png && echo "  Removing:  logo.png" || :
	@-rm -f ${DESTDIR}${datadir_pkg}/logo.png
	@test -f ${DESTDIR}${desktopdir}/${desktopfile} && echo "  Removing:  Desktop Entry" || :
	@-rm -f ${DESTDIR}${desktopdir}/${desktopfile}
	@test -f ${DESTDIR}${datadir_pkg}/EUPL.txt && echo "  Removing:  EUPL.txt" || :
	@-rm -f ${DESTDIR}${datadir_pkg}/EUPL.txt
	@test -f ${DESTDIR}${datadir_pkg}/CC-BY-SA.pdf && echo "  Removing:  CC-BY-SA.pdf" || :
	@-rm -f ${DESTDIR}${datadir_pkg}/CC-BY-SA.pdf
	@test -d ${DESTDIR}${datadir_pkg} && (rmdir ${DESTDIR}${datadir_pkg} 2> /dev/null \
	                                  || echo "  WARNING: \"${DESTDIR}${datadir_pkg}\" is not empty") || :

# clean
clean:
	@echo "Cleaning \"${PACKAGE_TARNAME}\""
	@echo "  Deleting:     object-files..."
	@-rm -f  ${ofiles}
	@-rm -f  ${builddir}/${binfile}
	@-rm -f  ${builddir}/${desktopfile}
	@echo "  Deleting:     build directory..."
	@test -d ${builddir} && (rmdir ${builddir} 2> /dev/null || echo "  WARNING: \"${builddir}\" is not empty") || :

distclean: clean
	@echo "  Deleting:     configuration..."
	@-rm -f ${datasrc}/${desktopfile}
	@-rm -f ${srcdir}/config.hh
	@-rm -f ${srcdir}/mainwnd-ui.xml.hh
	@-rm -f ${srcdir}/config.log
	@-rm -f ${srcdir}/config.status
	@-rm -f ${srcdir}/Makefile

# user information
help:
	@echo "No Help Available"

configinfo:
	@echo "DIRECTORIES:"
	@echo "  srcdir:      ${srcdir}"
	@echo
	@echo "  prefix:      ${prefix}"
	@echo "  exec_prefix: ${exec_prefix}"
	@echo "  datarootdir: ${datarootdir}"
	@echo "  datadir:     ${datadir}"
	@echo
	@echo "  bindir:      ${bindir}"
	@echo "  mandir:      ${mandir}"
	@echo "  docdir:      ${docdir}"
	@echo "  htmldir:     ${htmldir}"
	@echo "  dvidir:      ${dvidir}"
	@echo "  pdfdir:      ${pdfdir}"
	@echo "  psdir:       ${psdir}"
	@echo
	@echo "COMPILER FLAGS:"
	@if test -n "${USER_CFLAGS}";  then echo "  CFLAGS:   ${USER_CFLAGS}";  fi
	@if test -n "${USER_LIBS}";    then echo "  LIBS:     ${USER_LIBS}";    fi
	@if test -n "${USER_LDFLAGS}"; then echo "  LDFLAGS:  ${USER_LDFLAGS}"; fi
	@echo
	@echo "CONFIGURE OPTIONS:"
	@if test "${MODE}" = "DEBUG";        then echo "  --enable-debug";   fi
	@if test "${MODE}" = "PROFILE";      then echo "  --enable-profile"; fi
	@if test -n "${USER_LIBSCOREPRESS}"; then echo "  --with-libscorepress=${USER_LIBSCOREPRESS}"; fi
	@if test -n "${USER_LIBXML}";        then echo "  --with-libxml2=${USER_LIBXML}"; fi
	@if test -n "${USER_RPATH}";         then echo "  --with-rpath=${USER_RPATH}";    fi
	@echo

confargs := --srcdir=${srcdir}               \
	        --prefix=${prefix}               \
            --exec_prefix=${exec_prefix}     \
            --datarootdir=${datarootdir}     \
            --datadir=${datadir}             \
            --bindir=${bindir}               \
            --mandir=${mandir}               \
            --docdir=${docdir}               \
            --htmldir=${htmldir}             \
            --dvidir=${dvidir}               \
            --pdfdir=${pdfdir}               \
            --psdir=${psdir}

Makefile:
	@echo -n "${confargs} " > /tmp/$$.confargs
	@if test "${MODE}" = "DEBUG";   then echo -n "--enable-debug "   >> /tmp/$$.confargs; fi
	@if test "${MODE}" = "PROFILE"; then echo -n "--enable-profile " >> /tmp/$$.confargs; fi
	@if test -n "${USER_LIBXML}";   then echo -n "--with-libxml2=${USER_LIBXML} " >> /tmp/$$.confargs; fi
	@if test -n "${USER_LIBSCOREPRESS}"; \
	            then echo -n "--with-libscorepress=${USER_LIBSCOREPRESS} "     >> /tmp/$$.confargs; fi
	@if test -n "${USER_RPATH}";    then echo -n "--with-rpath=${USER_RPATH} " >> /tmp/$$.confargs; fi
	
	@echo -n > /tmp/$$.envvars
	@if test -n "${USER_CFLAGS}";  then echo -n "CFLAGS=${USER_CFLAGS} "   >> /tmp/$$.envvars; fi
	@if test -n "${USER_LIBS}";    then echo -n "LIBS=${USER_LIBS} "       >> /tmp/$$.envvars; fi
	@if test -n "${USER_LDFLAGS}"; then echo -n "LDFLAGS=${USER_LDFLAGS} " >> /tmp/$$.envvars; fi
	
	@echo "Running configure script..."
	@(eval `cat /tmp/$$.envvars` ${srcdir}/configure `cat /tmp/$$.confargs`)


# distributions
dist: ${srcfiles} ${distdir}
	cp -RP --preserve=timestamps,links ${distfiles} ${distdir}
	if test -f ${distdir}/src/config.hh; then rm -f ${distdir}/src/config.hh; fi

dist-gzip: ${srcfiles} dist
	tar -cf - ${distdir} | gzip -c > ${distdir}.tar.gz

dist-bzip2: ${srcfiles} dist
	tar -cf - ${distdir} | bzip2 -c > ${distdir}.tar.bz2

dist-zip: ${srcfiles} dist
	zip -qr ${distdir}.zip ${distdir}

deb: ${srcfiles}
	@echo "Debian Packaging not implemented yet."


# directories
${DESTDIR} ${builddir} ${distdir}:
	$(NORMAL_INSTALL)
	@-mkdir -p $@ 2> /dev/null || echo "    ERROR: cannot create directory \"$@\""
${DESTDIR}/%:
	$(NORMAL_INSTALL)
	@-mkdir -p $@ 2> /dev/null || echo "    ERROR: cannot create directory \"$@\""


#
# TARGET FILES
#

${builddir}/${binfile}: ${srcfiles}
						@echo "Making:         ${binfile}"
						@${MAKE} -s ${ofiles}
						@echo "  Linking:      ${binfile}..."
						@${CXX} ${ofiles} -o ${builddir}/${binfile} ${LIBS} ${FLAGS}

#
# MAIN PROGRAM
#

${builddir}/main.o:				${deps_main_cpp}
								echo "  Compiling:    main.cpp..."
								${CXX} -c ${cppsrc}/main.cpp -o ${builddir}/main.o ${GTKFLAGS} ${RSVGFLAGS} ${FLAGS}

${builddir}/application.o:		${deps_application_cpp}
								echo "  Compiling:    application.cpp..."
								${CXX} -c ${cppsrc}/application.cpp -o ${builddir}/application.o ${GTKFLAGS} ${RSVGFLAGS} ${FLAGS}

${builddir}/config.o:			${deps_config_cpp}
								echo "  Compiling:    config.cpp..."
								${CXX} -c ${cppsrc}/config.cpp -o ${builddir}/config.o ${GTKFLAGS} ${PANGOFLAGS} ${RSVGFLAGS} ${XMLFLAGS} ${FLAGS} ${CONFIGFLAGS}

${builddir}/controller.o:		${deps_controller_cpp}
								echo "  Compiling:    controller.cpp..."
								${CXX} -c ${cppsrc}/controller.cpp -o ${builddir}/controller.o ${GTKFLAGS} ${RSVGFLAGS} ${FLAGS}

#
# GRAPHICAL USER INTERFACE
#

${builddir}/rsvg_renderer.o:	${deps_rsvg_renderer_cpp}
								echo "  Compiling:    rsvg_renderer.cpp..."
								${CXX} -c ${cppsrc}/rsvg_renderer.cpp -o ${builddir}/rsvg_renderer.o ${PANGOFLAGS} ${RSVGFLAGS} ${XMLFLAGS} ${FLAGS}

${builddir}/key_map.o:			${deps_key_map_cpp}
								echo "  Compiling:    key_map.cpp..."
								${CXX} -c ${cppsrc}/key_map.cpp -o ${builddir}/key_map.o ${GTKFLAGS} ${FLAGS}

${builddir}/key_listener.o:		${deps_key_listener_cpp}
								echo "  Compiling:    key_listener.cpp..."
								${CXX} -c ${cppsrc}/key_listener.cpp -o ${builddir}/key_listener.o ${GTKFLAGS} ${RSVGFLAGS} ${FLAGS}

${builddir}/mainwnd.o:			${deps_mainwnd_cpp}
								echo "  Compiling:    mainwnd.cpp..."
								${CXX} -c ${cppsrc}/mainwnd.cpp -o ${builddir}/mainwnd.o ${GTKFLAGS} ${RSVGFLAGS} ${FLAGS}

${builddir}/about_dialog.o:		${deps_about_dialog_cpp}
								echo "  Compiling:    about_dialog.cpp..."
								${CXX} -c ${cppsrc}/about_dialog.cpp -o ${builddir}/about_dialog.o ${GTKFLAGS} ${FLAGS}

${builddir}/view.o:				${deps_view_cpp}
								echo "  Compiling:    view.cpp..."
								${CXX} -c ${cppsrc}/view.cpp -o ${builddir}/view.o ${GTKFLAGS} ${RSVGFLAGS} ${FLAGS}

${builddir}/score_widget.o:		${deps_score_widget_cpp}
								echo "  Compiling:    score_widget.cpp..."
								${CXX} -c ${cppsrc}/score_widget.cpp -o ${builddir}/score_widget.o ${GTKFLAGS} ${RSVGFLAGS} ${FLAGS}

${builddir}/icon_manager.o:		${deps_icon_manager_cpp}
								echo "  Compiling:    icon_manager.cpp..."
								${CXX} -c ${cppsrc}/icon_manager.cpp -o ${builddir}/icon_manager.o ${GTKFLAGS} ${FLAGS}

